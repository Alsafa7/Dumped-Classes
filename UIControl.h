@interface UIControl : UIView
{
	id _targetActions;
	struct _previousPoint;
	double _downTime;
	struct _controlFlags;
}

+ _connectInterfaceBuilderEventConnection:
+ initWithFrame:
+ dealloc
+ initWithCoder:
+ encodeWithCoder:
+ hitTest:withEvent:
+ state
+ touchesCancelled:withEvent:
+ touchesBegan:withEvent:
+ touchesMoved:withEvent:
+ touchesEnded:withEvent:
+ isTracking
+ cancelTouchTracking
+ cancelMouseTracking
+ isEnabled
+ canBecomeFirstResponder
+ _didMoveFromWindow:toWindow:
+ hitTest:forEvent:
+ setEnabled:
+ addTarget:action:forControlEvents:
+ setContentHorizontalAlignment:
+ setContentVerticalAlignment:
+ setHighlighted:
+ isHighlighted
+ isSelected
+ setSelected:
+ setTracking:
+ _cancelDelayedActions
+ _sendActionsForEvents:withEvent:
+ cancelTrackingWithEvent:
+ _unhighlight
+ _setLastHighlightSuccessful:
+ requiresDisplayOnTracking
+ shouldTrack
+ beginTrackingWithTouch:withEvent:
+ continueTrackingWithTouch:withEvent:
+ pointMostlyInside:withEvent:
+ isTouchInside
+ endTrackingWithTouch:withEvent:
+ _setTouchHasHighlighted:
+ _clippedHighlightBounds
+ _sendDelayedActions:
+ sendAction:to:forEvent:
+ removeTarget:action:forControlEvents:
+ contentVerticalAlignment
+ contentHorizontalAlignment
+ allTargets
+ allControlEvents
+ actionsForTarget:forControlEvent:
+ sendActionsForControlEvents:
+ _highlightCornerRadius
+ _hasActionForEventMask:
+ _setHighlightOnMouseDown:
+ _delayActions
+ _sendDelayedActions
+ _wasLastHighlightSuccessful
+ _touchHasHighlighted
+ touchDragged
+ setRequiresDisplayOnTracking:
+ hasOneOrMoreTargets
+ addTarget:action:forEvents:
+ removeTarget:forEvents:
- _connectInterfaceBuilderEventConnection:
- initWithFrame:
- dealloc
- initWithCoder:
- encodeWithCoder:
- hitTest:withEvent:
- state
- touchesCancelled:withEvent:
- touchesBegan:withEvent:
- touchesMoved:withEvent:
- touchesEnded:withEvent:
- isTracking
- cancelTouchTracking
- cancelMouseTracking
- isEnabled
- canBecomeFirstResponder
- _didMoveFromWindow:toWindow:
- hitTest:forEvent:
- setEnabled:
- addTarget:action:forControlEvents:
- setContentHorizontalAlignment:
- setContentVerticalAlignment:
- setHighlighted:
- isHighlighted
- isSelected
- setSelected:
- setTracking:
- _cancelDelayedActions
- _sendActionsForEvents:withEvent:
- cancelTrackingWithEvent:
- _unhighlight
- _setLastHighlightSuccessful:
- requiresDisplayOnTracking
- shouldTrack
- beginTrackingWithTouch:withEvent:
- continueTrackingWithTouch:withEvent:
- pointMostlyInside:withEvent:
- isTouchInside
- endTrackingWithTouch:withEvent:
- _setTouchHasHighlighted:
- _clippedHighlightBounds
- _sendDelayedActions:
- sendAction:to:forEvent:
- removeTarget:action:forControlEvents:
- contentVerticalAlignment
- contentHorizontalAlignment
- allTargets
- allControlEvents
- actionsForTarget:forControlEvent:
- sendActionsForControlEvents:
- _highlightCornerRadius
- _hasActionForEventMask:
- _setHighlightOnMouseDown:
- _delayActions
- _sendDelayedActions
- _wasLastHighlightSuccessful
- _touchHasHighlighted
- touchDragged
- setRequiresDisplayOnTracking:
- hasOneOrMoreTargets
- addTarget:action:forEvents:
- removeTarget:forEvents:
@end
